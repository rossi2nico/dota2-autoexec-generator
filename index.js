const fs = require('fs').promises;
const path = require('path');
const os = require('os');
const inquirer = require('inquirer');
const chalk = require('chalk');

class DotaAutoexecGenerator {
  constructor() {
    this.settings = {
      "dota_minimap_misclick_time": { desc: "Threshold delay for minimap misclicks", default: "0.2" },
      "dota_health_hurt_decay_time_max": { desc: "HP bar change delay max", default: "0" },
      "dota_health_hurt_decay_time_min": { desc: "HP bar change delay min", default: "0" },
      "dota_health_hurt_delay": { desc: "HP bar delay", default: "0" },
      "dota_pain_decay": { desc: "HP pain decay", default: "0" },
      "dota_pain_factor": { desc: "HP pain factor", default: "0" },
      "dota_pain_multiplier": { desc: "HP pain multiplier", default: "0" },
      "dota_health_per_vertical_marker": { desc: "Health segment spacing", default: "200" },
      "dota_health_marker_major_alpha": { desc: "Major HP divider opacity", default: "255" },
      "dota_health_marker_minor_alpha": { desc: "Minor HP divider opacity", default: "128" },
      "dota_hud_healthbar_number": { desc: "Show HP number above bar", default: "1" },
      "dota_minimap_hero_size": { desc: "Minimap hero icon size", default: "800" },
      "dota_minimap_rune_size": { desc: "Rune icon size on minimap", default: "325" },
      "dota_minimap_creep_scale": { desc: "Minimap creep scale", default: "1" },
      "dota_minimap_ping_duration": { desc: "Ping duration on minimap", default: "3" },
      "engine_no_focus_sleep": { desc: "Run full FPS while tabbed", default: "0" }
    };

    this.binds = [
      'bindtoggle "o" "dota_camera_disable_zoom"',
      'bind "ctrl" "+dota_unit_movetodirection"',
      'bind "f7" disconnect'
    ];
  }

  getDotaCfgPath() {
    const platform = os.platform();
    let possiblePaths = [];

    if (platform === 'win32') {
      const programFiles86 = process.env['ProgramFiles(x86)'] || 'C:\\Program Files (x86)';
      const programFiles = process.env['ProgramFiles'] || 'C:\\Program Files';
      
      possiblePaths = [
        path.join(programFiles86, 'Steam', 'steamapps', 'common', 'dota 2 beta', 'game', 'dota', 'cfg'),
        path.join(programFiles, 'Steam', 'steamapps', 'common', 'dota 2 beta', 'game', 'dota', 'cfg'),
        'C:\\Program Files\\Steam\\steamapps\\common\\dota 2 beta\\game\\dota\\cfg',
        'D:\\Steam\\steamapps\\common\\dota 2 beta\\game\\dota\\cfg',
        'E:\\Steam\\steamapps\\common\\dota 2 beta\\game\\dota\\cfg'
      ];
    } else if (platform === 'darwin') {
      possiblePaths = [
        path.join(os.homedir(), 'Library', 'Application Support', 'Steam', 'steamapps', 'common', 'dota 2 beta', 'game', 'dota', 'cfg')
      ];
    } else if (platform === 'linux') {
      possiblePaths = [
        path.join(os.homedir(), '.steam', 'steam', 'steamapps', 'common', 'dota 2 beta', 'game', 'dota', 'cfg'),
        path.join(os.homedir(), '.local', 'share', 'Steam', 'steamapps', 'common', 'dota 2 beta', 'game', 'dota', 'cfg')
      ];
    }

    return possiblePaths;
  }

  async findDotaInstallation() {
    const possiblePaths = this.getDotaCfgPath();
    
    for (const cfgPath of possiblePaths) {
      const dotaPath = path.dirname(cfgPath);
      try {
        await fs.access(dotaPath);
        console.log(chalk.green(`‚úì Found Dota 2 installation: ${dotaPath}`));
        return cfgPath;
      } catch (error) {
        // Path doesn't exist, continue searching
      }
    }

    return null;
  }

  async getConfigValues() {
    const questions = [];
    
    for (const [cmd, {desc, default: defaultVal}] of Object.entries(this.settings)) {
      questions.push({
        type: 'input',
        name: cmd,
        message: `${desc}?`,
        default: defaultVal
      });
    }

    const answers = await inquirer.prompt(questions);
    return answers;
  }

  generateConfig(configValues) {
    const lines = [];
    
    lines.push('// Generated by dota2-autoexec-generator');
    lines.push('// https://github.com/yourusername/dota2-autoexec-generator');
    lines.push('');
    
    lines.push('// Settings');
    for (const [cmd, value] of Object.entries(configValues)) {
      lines.push(`${cmd} "${value}"`);
    }
    
    lines.push('');
    lines.push('// Keybinds');
    lines.push(...this.binds);
    
    return lines.join('\n');
  }

  async run() {
    console.log(chalk.cyan.bold('=== Dota 2 Autoexec Config Generator ===\n'));

    let cfgPath = await this.findDotaInstallation();
    
    if (!cfgPath) {
      console.log(chalk.yellow('‚ö† Could not auto-detect Dota 2 installation.'));
      
      const { customPath } = await inquirer.prompt([
        {
          type: 'input',
          name: 'customPath',
          message: 'Enter your Dota 2 cfg directory path (or press Enter to save in current directory):',
          default: path.join(process.cwd(), 'cfg')
        }
      ]);
      
      cfgPath = customPath;
    }

    console.log(chalk.blue('\nConfigure your settings:'));
    const configValues = await this.getConfigValues();

    const configContent = this.generateConfig(configValues);

    try {
      await fs.mkdir(cfgPath, { recursive: true });
    } catch (error) {
      throw new Error(`Failed to create directory: ${cfgPath}`);
    }

    const configFile = path.join(cfgPath, 'autoexec.cfg');
    await fs.writeFile(configFile, configContent);

    console.log(chalk.green('\n‚úì autoexec.cfg generated successfully!'));
    console.log(chalk.gray(`üìÅ Location: ${configFile}`));
    console.log(chalk.gray(`üìÑ Size: ${configContent.length} bytes`));
    console.log(chalk.gray("github.com/rossi2nico/dota2-autoexec-generator"))
  }
}

module.exports = { DotaAutoexecGenerator };

if (require.main === module) {
  const generator = new DotaAutoexecGenerator();
  generator.run().catch(console.error);
}
